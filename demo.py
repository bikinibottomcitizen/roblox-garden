#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Roblox Garden Parser
–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
"""

import asyncio
import os
from datetime import datetime

from roblox_garden.config.settings import Settings
from roblox_garden.websocket.client import WebSocketClient
from roblox_garden.filters.item_filters import RobloxGardenFilter
from roblox_garden.utils.formatters import MessageFormatter


async def demo_parser():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞."""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mock –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ.update({
        'TELEGRAM_BOT_TOKEN': 'demo_token',
        'TELEGRAM_FULL_CHANNEL_ID': '-1001234567890',
        'TELEGRAM_UPDATES_CHANNEL_ID': '-1001234567891',
        'LOG_LEVEL': 'INFO'
    })
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Roblox Garden Parser")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    settings = Settings()
    client = WebSocketClient(settings)
    formatter = MessageFormatter(settings)
    item_filter = RobloxGardenFilter.create_combined_filter()
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
        print("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Roblox Garden API...")
        await client.connect()
        
        iteration = 0
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        async for shop_data in client.listen():
            iteration += 1
            print(f"\nüìä –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration} - {datetime.now().strftime('%H:%M:%S')}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º
            all_items = shop_data.items
            print(f"–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ: {len(all_items)}")
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º
            seeds = [item for item in all_items if item.type.value == 'seed']
            gears = [item for item in all_items if item.type.value == 'gear']  
            eggs = [item for item in all_items if item.type.value == 'egg']
            
            print(f"‚îú‚îÄ üå± –°–µ–º–µ–Ω–∞: {len(seeds)}")
            print(f"‚îú‚îÄ ‚öôÔ∏è –ì–∏—Ä—ã: {len(gears)}")
            print(f"‚îî‚îÄ ü•ö –Ø–π—Ü–∞: {len(eggs)}")
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            filtered_items = [item for item in all_items if item_filter.should_include(item)]
            
            if filtered_items:
                print(f"\n‚ú® –ù–∞–π–¥–µ–Ω–æ {len(filtered_items)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤:")
                
                for item in filtered_items:
                    status = "‚úÖ –í –Ω–∞–ª–∏—á–∏–∏" if item.in_stock else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                    print(f"  {item.get_emoji()} [{item.rarity.value}] {item.name} ({item.quantity}—à—Ç) - {status}")
                
                # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                print(f"\nüì± –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:")
                print("-" * 30)
                update_message = formatter.format_new_items_message(filtered_items)
                print(update_message)
                
                print(f"\nüìã –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç:")
                print("-" * 30)
                full_report = formatter.format_full_report_message(filtered_items, shop_data.timestamp)
                print(full_report)
                
            else:
                print("\n‚ùå –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º")
                print("   (–ò—â–µ–º —Å–µ–º–µ–Ω–∞/–≥–∏—Ä—ã Divine+ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —è–π—Ü–∞)")
            
            # –û—Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –ø–æ—Å–ª–µ 3 –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            if iteration >= 3:
                print(f"\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ—Å–ª–µ {iteration} –∏—Ç–µ—Ä–∞—Ü–∏–π")
                break
            
            print(f"\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (30 —Å–µ–∫)...")
            
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await client.close()
        print("\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")


if __name__ == "__main__":
    print("Roblox Garden Parser Demo")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print()
    
    try:
        asyncio.run(demo_parser())
    except KeyboardInterrupt:
        print("\n–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    
    print("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Roblox Garden Parser! üå±")
