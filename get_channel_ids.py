#!/usr/bin/env python3

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ID –∫–∞–Ω–∞–ª–æ–≤ Telegram.
–ü–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ ID –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Roblox Garden Bot.
"""

import asyncio
import os
import sys
from typing import Optional, List, Dict, Any

try:
    from aiogram import Bot, Dispatcher
    from aiogram.types import Update, Chat, Message
    from aiogram.exceptions import TelegramBadRequest, TelegramUnauthorizedError
    import aiohttp
except ImportError as e:
    print("‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:", e)
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install aiogram aiohttp")
    sys.exit(1)


class ChannelIdFinder:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ ID –∫–∞–Ω–∞–ª–æ–≤ Telegram."""
    
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.bot = Bot(token=bot_token)
    
    async def get_bot_info(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ."""
        try:
            bot_info = await self.bot.get_me()
            return {
                'id': bot_info.id,
                'username': bot_info.username,
                'first_name': bot_info.first_name,
                'can_join_groups': bot_info.can_join_groups,
                'can_read_all_group_messages': bot_info.can_read_all_group_messages
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
            return None
    
    async def get_updates(self) -> List[Update]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await self.bot.delete_webhook(drop_pending_updates=True)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            updates = await self.bot.get_updates(offset=-1, limit=100, timeout=10)
            
            if updates:
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                last_update_id = updates[-1].update_id
                await self.bot.get_updates(offset=last_update_id + 1, limit=1, timeout=1)
            
            return updates
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return []
    
    async def analyze_chat(self, chat: Chat) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ."""
        try:
            # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            member_count = None
            if chat.type in ['group', 'supergroup', 'channel']:
                try:
                    member_count = await self.bot.get_chat_member_count(chat.id)
                except:
                    member_count = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –≤ —á–∞—Ç–µ
            bot_member = None
            bot_can_post = False
            try:
                bot_info = await self.bot.get_me()
                bot_member = await self.bot.get_chat_member(chat.id, bot_info.id)
                
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
                if bot_member:
                    if bot_member.status in ['administrator', 'creator']:
                        # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∞–≤–∞
                        if hasattr(bot_member, 'can_post_messages'):
                            bot_can_post = getattr(bot_member, 'can_post_messages', True)
                        else:
                            bot_can_post = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å
                    elif bot_member.status == 'member':
                        bot_can_post = True  # –û–±—ã—á–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å
            except:
                pass
            
            return {
                'id': chat.id,
                'type': chat.type,
                'title': chat.title,
                'username': chat.username,
                'description': chat.description,
                'member_count': member_count,
                'bot_status': bot_member.status if bot_member else "–ù–µ —É—á–∞—Å—Ç–Ω–∏–∫",
                'bot_can_post': bot_can_post
            }
        except Exception as e:
            return {
                'id': chat.id,
                'type': chat.type,
                'title': chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                'username': chat.username,
                'error': str(e)
            }
    
    async def find_channels(self) -> Dict[str, List[Dict[str, Any]]]:
        """–ù–∞–π—Ç–∏ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã, –≥–¥–µ –µ—Å—Ç—å –±–æ—Ç."""
        print("üîç –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤...")
        
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        try:
            updates = await self.get_updates()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            updates = []
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
        if not updates:
            print("‚ö†Ô∏è –ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
            print("ÔøΩ –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞:")
            print("   1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            print("   2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            print("   3. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª—ã")
            print()
            
            choice = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ ID –∫–∞–Ω–∞–ª–æ–≤? (y/N): ").strip().lower()
            if choice in ['y', 'yes', '–¥–∞']:
                return await self.manual_channel_input()
            else:
                return {'channels': [], 'groups': [], 'private': []}
        
        # –°–æ–±—Ä–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        chats = {}
        print(f"üì® –ù–∞–π–¥–µ–Ω–æ {len(updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
        
        for i, update in enumerate(updates):
            chat = None
            update_type = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            if update.message and update.message.chat:
                chat = update.message.chat
                update_type = f"—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update.message.from_user.first_name if update.message.from_user else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
            elif update.channel_post and update.channel_post.chat:
                chat = update.channel_post.chat
                update_type = "–ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ"
            elif hasattr(update, 'my_chat_member') and update.my_chat_member:
                chat = update.my_chat_member.chat
                update_type = "–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"
            elif hasattr(update, 'chat_member') and update.chat_member:
                chat = update.chat_member.chat
                update_type = "–∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞"
            elif hasattr(update, 'edited_message') and update.edited_message:
                chat = update.edited_message.chat
                update_type = "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
            elif hasattr(update, 'edited_channel_post') and update.edited_channel_post:
                chat = update.edited_channel_post.chat
                update_type = "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∫–∞–Ω–∞–ª–∞"
            
            if chat:
                chats[chat.id] = chat
                print(f"  {i+1}. {chat.type}: {chat.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} ({update_type})")
            else:
                print(f"  {i+1}. –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {type(update).__name__}")
        
        print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(chats)}")
        for chat_id, chat in chats.items():
            print(f"  ‚Ä¢ {chat.type}: {chat.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} (ID: {chat_id})")
        
        if not chats:
            print("‚ùå –í –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–∞—Ö.")
            choice = input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ ID –∫–∞–Ω–∞–ª–æ–≤? (y/N): ").strip().lower()
            if choice in ['y', 'yes', '–¥–∞']:
                return await self.manual_channel_input()
            else:
                return {'channels': [], 'groups': [], 'private': []}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Ç
        channels = []
        groups = []
        private = []
        
        print(f"üìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {len(chats)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤...")
        
        for chat in chats.values():
            try:
                chat_info = await self.analyze_chat(chat)
                
                if chat.type == 'channel':
                    channels.append(chat_info)
                elif chat.type in ['group', 'supergroup']:
                    groups.append(chat_info)
                elif chat.type == 'private':
                    private.append(chat_info)
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Ç–∞ {chat.id}: {e}")
                continue
        
        return {
            'channels': channels,
            'groups': groups,
            'private': private
        }
    
    async def manual_channel_input(self) -> Dict[str, List[Dict[str, Any]]]:
        """–†—É—á–Ω–æ–π –≤–≤–æ–¥ ID –∫–∞–Ω–∞–ª–æ–≤."""
        print("\nüìã –†–£–ß–ù–û–ô –í–í–û–î ID –ö–ê–ù–ê–õ–û–í")
        print("=" * 30)
        print()
        print("üí° –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞:")
        print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram Web (web.telegram.org)")
        print("   2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª")
        print("   3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —á–∏—Å–ª–∞ –∏–∑ URL –ø–æ—Å–ª–µ 'c/' (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1234567890)")
        print("   4. –î–æ–±–∞–≤—å—Ç–µ -100 –≤ –Ω–∞—á–∞–ª–æ (–ø–æ–ª—É—á–∏—Ç—Å—è: -1001234567890)")
        print()
        
        channels = []
        
        # –í–≤–æ–¥ –ø–æ–ª–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        print("üì∫ –ü–û–õ–ù–´–ô –ö–ê–ù–ê–õ (–¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)")
        while True:
            full_channel = input("ID –ø–æ–ª–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: ").strip()
            if not full_channel:
                print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
                break
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ID
            if full_channel.isdigit():
                full_channel = f"-100{full_channel}"
            
            if not full_channel.startswith('-'):
                print("‚ùå ID –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å - –∏–ª–∏ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
            try:
                chat = await self.bot.get_chat(full_channel)
                channels.append({
                    'id': chat.id,
                    'type': chat.type,
                    'title': chat.title or "–ü–æ–ª–Ω—ã–π –∫–∞–Ω–∞–ª",
                    'username': chat.username,
                    'purpose': 'full',
                    'bot_can_post': True
                })
                print(f"‚úÖ –ü–æ–ª–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {chat.title} ({chat.id})")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {full_channel}: {e}")
                retry = input("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π ID? (y/N): ").strip().lower()
                if retry not in ['y', 'yes', '–¥–∞']:
                    break
        
        # –í–≤–æ–¥ –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        print("\nüì± –ö–ê–ù–ê–õ –û–ë–ù–û–í–õ–ï–ù–ò–ô (–¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤)")
        while True:
            updates_channel = input("ID –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ").strip()
            if not updates_channel:
                print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
                break
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ID
            if updates_channel.isdigit():
                updates_channel = f"-100{updates_channel}"
            
            if not updates_channel.startswith('-'):
                print("‚ùå ID –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å - –∏–ª–∏ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
            try:
                chat = await self.bot.get_chat(updates_channel)
                channels.append({
                    'id': chat.id,
                    'type': chat.type,
                    'title': chat.title or "–ö–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π",
                    'username': chat.username,
                    'purpose': 'updates',
                    'bot_can_post': True
                })
                print(f"‚úÖ –ö–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω: {chat.title} ({chat.id})")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {updates_channel}: {e}")
                retry = input("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π ID? (y/N): ").strip().lower()
                if retry not in ['y', 'yes', '–¥–∞']:
                    break
        
        return {
            'channels': channels,
            'groups': [],
            'private': []
        }
    
    async def test_channel_access(self, channel_id: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É."""
        try:
            chat = await self.bot.get_chat(channel_id)
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
            can_send = False
            try:
                bot_info = await self.bot.get_me()
                member = await self.bot.get_chat_member(channel_id, bot_info.id)
                
                if member:
                    if member.status in ['administrator', 'creator']:
                        # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
                        if hasattr(member, 'can_post_messages'):
                            can_send = getattr(member, 'can_post_messages', True)
                        else:
                            can_send = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å
                    elif member.status == 'member':
                        can_send = True  # –û–±—ã—á–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å
            except:
                pass
            
            return {
                'accessible': True,
                'chat_info': await self.analyze_chat(chat),
                'can_send_messages': can_send
            }
        except Exception as e:
            return {
                'accessible': False,
                'error': str(e)
            }
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."""
        await self.bot.session.close()
    
    async def _direct_channel_input(self):
        """–ü—Ä—è–º–æ–π –≤–≤–æ–¥ ID –∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
        print("üìã –ü–†–Ø–ú–û–ô –í–í–û–î ID –ö–ê–ù–ê–õ–û–í")
        print("=" * 30)
        
        updates_channel = None
        full_channel = None
        
        # –í–≤–æ–¥ –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        while not updates_channel:
            channel_id = input("\nüì± ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –û–ë–ù–û–í–õ–ï–ù–ò–ô: ").strip()
            if not channel_id:
                print("‚ùå ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                continue
                
            if channel_id.isdigit():
                channel_id = f"-100{channel_id}"
            
            try:
                chat = await self.bot.get_chat(channel_id)
                updates_channel = {
                    'id': chat.id,
                    'title': chat.title or "–ö–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π",
                    'type': chat.type
                }
                print(f"‚úÖ –ö–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω: {chat.title}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                continue
        
        # –í–≤–æ–¥ –ø–æ–ª–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        while not full_channel:
            channel_id = input("\nüì∫ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ü–û–õ–ù–´–• –û–¢–ß–ï–¢–û–í: ").strip()
            if not channel_id:
                print("‚ùå ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                continue
                
            if channel_id.isdigit():
                channel_id = f"-100{channel_id}"
            
            try:
                chat = await self.bot.get_chat(channel_id)
                full_channel = {
                    'id': chat.id,
                    'title': chat.title or "–ü–æ–ª–Ω—ã–π –∫–∞–Ω–∞–ª",
                    'type': chat.type
                }
                print(f"‚úÖ –ü–æ–ª–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {chat.title}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                continue
        
        return updates_channel, full_channel


def print_chat_info(chat_info: Dict[str, Any], index: int):
    """–ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ."""
    print(f"\n{index}. üì¢ {chat_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
    print(f"   üÜî ID: {chat_info['id']}")
    print(f"   üì± –¢–∏–ø: {chat_info['type']}")
    
    if chat_info.get('username'):
        print(f"   üîó Username: @{chat_info['username']}")
    
    if chat_info.get('member_count'):
        print(f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {chat_info['member_count']}")
    
    print(f"   ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {chat_info.get('bot_status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    
    if chat_info.get('bot_can_post'):
        print(f"   ‚úÖ –ú–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
    elif chat_info.get('bot_status') == 'administrator':
        print(f"   ‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –Ω–æ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É")
    else:
        print(f"   ‚ùå –ù–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")


async def interactive_setup(finder: ChannelIdFinder):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤."""
    print("\nüéØ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ö–ê–ù–ê–õ–û–í")
    print("=" * 50)
    
    # –ù–∞–π—Ç–∏ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    chats = await finder.find_channels()
    
    all_chats = []
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª—ã
    if chats['channels']:
        print(f"\nüì∫ –ù–ê–ô–î–ï–ù–ù–´–ï –ö–ê–ù–ê–õ–´ ({len(chats['channels'])})")
        print("-" * 30)
        for i, channel in enumerate(chats['channels'], 1):
            print_chat_info(channel, i)
            all_chats.append(('channel', channel))
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—ã/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
    if chats['groups']:
        print(f"\nüë• –ù–ê–ô–î–ï–ù–ù–´–ï –ì–†–£–ü–ü–´ ({len(chats['groups'])})")
        print("-" * 30)
        start_index = len(all_chats) + 1
        for i, group in enumerate(chats['groups'], start_index):
            print_chat_info(group, i)
            all_chats.append(('group', group))
    
    if not all_chats:
        print("\n‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!")
        print("\nÔøΩ –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –≤–≤–æ–¥ ID –∫–∞–Ω–∞–ª–æ–≤...")
        
        try:
            return await finder._direct_channel_input()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –≤–≤–æ–¥–∞: {e}")
            return None, None
    
    print(f"\nüîß –ù–ê–°–¢–†–û–ô–ö–ê –ö–ê–ù–ê–õ–û–í")
    print("-" * 20)
    
    # –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    updates_channel = None
    while not updates_channel:
        try:
            print(f"\nüì± –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –û–ë–ù–û–í–õ–ï–ù–ò–ô (1-{len(all_chats)}):")
            choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ").strip()
            
            if choice.lower() in ['q', 'quit', 'exit']:
                return None, None
            
            index = int(choice) - 1
            if 0 <= index < len(all_chats):
                updates_channel = all_chats[index][1]
                print(f"‚úÖ –ö–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {updates_channel['title']} (ID: {updates_channel['id']})")
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ", len(all_chats))
        except KeyboardInterrupt:
            return None, None
    
    # –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    full_channel = None
    while not full_channel:
        try:
            print(f"\nüìä –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ü–û–õ–ù–û–ì–û –û–¢–ß–ï–¢–ê (1-{len(all_chats)}):")
            print("(–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ç –∂–µ –∫–∞–Ω–∞–ª, —á—Ç–æ –∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)")
            choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ").strip()
            
            if choice.lower() in ['q', 'quit', 'exit']:
                return None, None
            
            index = int(choice) - 1
            if 0 <= index < len(all_chats):
                full_channel = all_chats[index][1]
                print(f"‚úÖ –ö–∞–Ω–∞–ª –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {full_channel['title']} (ID: {full_channel['id']})")
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ", len(all_chats))
        except KeyboardInterrupt:
            return None, None
    
    return updates_channel, full_channel


def generate_env_config(bot_token: str, updates_channel: Dict[str, Any], full_channel: Dict[str, Any]):
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è .env —Ñ–∞–π–ª–∞."""
    print(f"\nüéâ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ì–û–¢–û–í–ê!")
    print("=" * 50)
    
    print(f"\nüìù –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –≤ –≤–∞—à .env —Ñ–∞–π–ª:")
    print("-" * 40)
    print(f"TELEGRAM_BOT_TOKEN={bot_token}")
    print(f"UPDATES_CHANNEL_ID={updates_channel['id']}")
    print(f"FULL_CHANNEL_ID={full_channel['id']}")
    
    print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–∞—Ö:")
    print(f"üì± –ö–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {updates_channel['title']} (ID: {updates_channel['id']})")
    print(f"üìä –ö–∞–Ω–∞–ª –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {full_channel['title']} (ID: {full_channel['id']})")
    
    # –°–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª
    env_content = f"""# Roblox Garden Bot Configuration
# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ {asyncio.get_event_loop().time()}

# Telegram Bot Configuration
TELEGRAM_BOT_TOKEN={bot_token}
UPDATES_CHANNEL_ID={updates_channel['id']}
FULL_CHANNEL_ID={full_channel['id']}

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
TELEGRAM_UPDATES_CHANNEL_ID={updates_channel['id']}
TELEGRAM_FULL_CHANNEL_ID={full_channel['id']}

# WebSocket Configuration
WS_URL=wss://api.growagarden.com/socket
RECONNECT_DELAY=5
MAX_RECONNECT_ATTEMPTS=10

# Update Intervals (in seconds)
UPDATE_INTERVAL=300        # 5 minutes
FULL_UPDATE_INTERVAL=300   # 5 minutes

# Timezone
TIMEZONE=Europe/Moscow

# Logging
LOG_LEVEL=INFO
LOG_FILE=logs/roblox_garden.log
"""
    
    try:
        with open('.env', 'w', encoding='utf-8') as f:
            f.write(env_content)
        print(f"\n‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        print(f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª: {e}")
        print("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é.")


async def manual_check():
    """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ID –∫–∞–Ω–∞–ª–∞."""
    print(f"\nüîç –†–£–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–ê–ù–ê–õ–ê")
    print("-" * 30)
    
    bot_token = input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: ").strip()
    if not bot_token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    
    channel_id = input("–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, -1001234567890): ").strip()
    if not channel_id:
        print("‚ùå ID –∫–∞–Ω–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    
    finder = ChannelIdFinder(bot_token)
    
    try:
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞ {channel_id}...")
        result = await finder.test_channel_access(channel_id)
        
        if result['accessible']:
            print("‚úÖ –ö–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω!")
            print_chat_info(result['chat_info'], 1)
            
            if result['can_send_messages']:
                print("‚úÖ –ë–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª")
            else:
                print("‚ùå –ë–æ—Ç –ù–ï –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª")
                print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π")
        else:
            print("‚ùå –ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
            print(f"–û—à–∏–±–∫–∞: {result['error']}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    finally:
        await finder.close()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("ü§ñ –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï ID –ö–ê–ù–ê–õ–û–í TELEGRAM")
    print("=" * 50)
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ ID –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è Roblox Garden Bot")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env —Ñ–∞–π–ª
    if os.path.exists('.env'):
        print("\n‚ö†Ô∏è –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        overwrite = input("–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ? (y/N): ").strip().lower()
        if overwrite not in ['y', 'yes', '–¥–∞']:
            print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
    
    print(f"\nüìã –ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã:")
    print("1. ü§ñ –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞ (@BotFather)")
    print("2. üì¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    print("3. üîß –£ –±–æ—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("4. üí¨ –í –∫–∞–Ω–∞–ª–∞—Ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    
    while True:
        print(f"\nüîß –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
        print("1. üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
        print("2. üîç –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ID –∫–∞–Ω–∞–ª–∞")
        print("3. ‚ùå –í—ã—Ö–æ–¥")
        
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
        
        if choice == '1':
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
            bot_token = input("\nü§ñ –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: ").strip()
            
            if not bot_token:
                print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                continue
            
            finder = ChannelIdFinder(bot_token)
            
            try:
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω
                print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞...")
                bot_info = await finder.get_bot_info()
                
                if not bot_info:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
                    continue
                
                print(f"‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω: @{bot_info['username']} ({bot_info['first_name']})")
                
                # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
                updates_channel, full_channel = await interactive_setup(finder)
                
                if updates_channel and full_channel:
                    generate_env_config(bot_token, updates_channel, full_channel)
                    
                    print(f"\nüöÄ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞:")
                    print("python -m roblox_garden")
                    print("–∏–ª–∏")
                    print("./deploy.sh")
                    break
                else:
                    print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            
            except TelegramUnauthorizedError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            finally:
                await finder.close()
        
        elif choice == '2':
            # –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º
            await manual_check()
        
        elif choice == '3':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\nüëã –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
