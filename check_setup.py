#!/usr/bin/env python3

"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã Roblox Garden Bot.
"""

import os
import sys
from pathlib import Path

def check_file(filepath, description, required=True):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞."""
    exists = os.path.exists(filepath)
    status = "‚úÖ" if exists else ("‚ùå" if required else "‚ö†Ô∏è")
    print(f"{status} {description}: {filepath}")
    return exists

def check_env_var(var_name, description, required=True):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    value = os.getenv(var_name)
    has_value = value is not None and value.strip() != ""
    status = "‚úÖ" if has_value else ("‚ùå" if required else "‚ö†Ô∏è")
    display_value = "***" if has_value and "TOKEN" in var_name else (value or "–Ω–µ –∑–∞–¥–∞–Ω–∞")
    print(f"{status} {description}: {display_value}")
    return has_value

def parse_env_file():
    """–ü–∞—Ä—Å–∏–Ω–≥ .env —Ñ–∞–π–ª–∞."""
    env_vars = {}
    if os.path.exists('.env'):
        try:
            with open('.env', 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        env_vars[key.strip()] = value.strip()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env —Ñ–∞–π–ª–∞: {e}")
    return env_vars

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò ROBLOX GARDEN BOT")
    print("=" * 50)
    
    all_ok = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    print("\nüìÅ –û–°–ù–û–í–ù–´–ï –§–ê–ô–õ–´:")
    files_to_check = [
        ("roblox_garden/__main__.py", "–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å", True),
        ("roblox_garden/config/settings.py", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", True),
        ("roblox_garden/telegram/bot.py", "Telegram –±–æ—Ç", True),
        ("requirements.txt", "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", True),
        (".env", "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", False),
        ("Dockerfile", "Docker –æ–±—Ä–∞–∑", False),
        ("docker-compose.yml", "Docker Compose", False),
    ]
    
    for filepath, desc, required in files_to_check:
        if not check_file(filepath, desc, required) and required:
            all_ok = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
    print(f"\n‚öôÔ∏è –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:")
    env_vars = parse_env_file()
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –∏ —Å–∏—Å—Ç–µ–º—ã
    for key, value in env_vars.items():
        os.environ[key] = value
    
    env_checks = [
        ("TELEGRAM_BOT_TOKEN", "–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞", True),
        ("UPDATES_CHANNEL_ID", "ID –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π", False),
        ("FULL_CHANNEL_ID", "ID –∫–∞–Ω–∞–ª–∞ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞", False),
        ("TELEGRAM_UPDATES_CHANNEL_ID", "ID –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (—Å—Ç–∞—Ä–æ–µ)", False),
        ("TELEGRAM_FULL_CHANNEL_ID", "ID –∫–∞–Ω–∞–ª–∞ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (—Å—Ç–∞—Ä–æ–µ)", False),
    ]
    
    has_channel_config = False
    for var_name, desc, required in env_checks:
        if check_env_var(var_name, desc, required):
            if "CHANNEL" in var_name:
                has_channel_config = True
        elif required:
            all_ok = False
    
    if not has_channel_config:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤")
        all_ok = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤
    print(f"\nüì¶ PYTHON –ü–ê–ö–ï–¢–´:")
    try:
        import aiogram
        print(f"‚úÖ aiogram: {aiogram.__version__}")
    except ImportError:
        print("‚ùå aiogram: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        all_ok = False
    
    try:
        import aiohttp
        print(f"‚úÖ aiohttp: {aiohttp.__version__}")
    except ImportError:
        print("‚ùå aiohttp: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        all_ok = False
    
    try:
        import pydantic
        print(f"‚úÖ pydantic: {pydantic.__version__}")
    except ImportError:
        print("‚ùå pydantic: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        all_ok = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    print(f"\nüìÇ –î–ò–†–ï–ö–¢–û–†–ò–ò:")
    dirs_to_check = [
        ("logs", "–õ–æ–≥–∏", False),
        ("roblox_garden", "–û—Å–Ω–æ–≤–Ω–æ–π –ø–∞–∫–µ—Ç", True),
        ("roblox_garden/core", "–Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã", True),
        ("roblox_garden/telegram", "Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", True),
    ]
    
    for dirpath, desc, required in dirs_to_check:
        exists = os.path.isdir(dirpath)
        status = "‚úÖ" if exists else ("‚ùå" if required else "‚ö†Ô∏è")
        print(f"{status} {desc}: {dirpath}")
        if not exists and required:
            all_ok = False
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if not os.path.exists('.env'):
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é: python get_channel_ids.py")
    
    if not has_channel_config:
        print("üì± –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª—ã Telegram: python get_channel_ids.py")
    
    if not os.path.exists('logs'):
        print("üìÅ –°–æ–∑–¥–∞–π—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é logs: mkdir logs")
    
    # –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
    print(f"\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    
    if all_ok:
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!")
        print("üéØ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python -m roblox_garden")
        print("üê≥ –ò–ª–∏ —á–µ—Ä–µ–∑ Docker: ./deploy.sh")
    else:
        print("‚ùå –°–∏—Å—Ç–µ–º–∞ –ù–ï –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ")
        
        if not has_channel_config:
            print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª—ã: python get_channel_ids.py")
        
        print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–Ω–æ–≤–∞: python check_setup.py")
    
    # –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    print(f"\nüìã –ü–û–õ–ï–ó–ù–´–ï –ö–û–ú–ê–ù–î–´:")
    print("üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤:     python get_channel_ids.py")
    print("üìä –î–µ–º–æ –±–µ–∑ Telegram:     python demo.py")
    print("üîß –¢–µ—Å—Ç Telegram:         python test_telegram.py")
    print("üê≥ Docker —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ:  ./deploy.sh")
    print("üìñ –ü–æ–ª–Ω—ã–π –æ–±–∑–æ—Ä:          python overview.py")
    
    return all_ok

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        sys.exit(1)
